// FICHIER: ./services/dailyService.js

import { supabase } from './supabase';

export class DailyService {

  // ‚úÖ CORRIG√â: R√©cup√©rer ou cr√©er le score du jour pour un utilisateur
  static async getTodayScore(userId) {
    try {
      const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
      
      console.log('üìä R√©cup√©ration score du jour...', { userId, today });
      
      // ‚úÖ CORRECTION: Gestion d'erreur plus robuste
      let existingScore = null;
      
      try {
        // Essayer de r√©cup√©rer le score existant
        const { data, error: fetchError } = await supabase
          .from('daily_scores')
          .select('*')
          .eq('user_id', userId)
          .eq('date', today)
          .single();

        if (fetchError) {
          // PGRST116 = "No rows found" - c'est normal, on va cr√©er
          if (fetchError.code !== 'PGRST116') {
            console.warn('‚ö†Ô∏è Erreur fetch score (non-critique):', fetchError);
            // Continuer pour essayer de cr√©er au lieu de throw
          }
        } else {
          existingScore = data;
        }
      } catch (fetchErr) {
        console.warn('‚ö†Ô∏è Erreur fetch score (fallback):', fetchErr);
        // Continuer pour essayer de cr√©er
      }

      if (existingScore) {
        console.log('‚úÖ Score du jour trouv√©:', existingScore);
        return {
          success: true,
          score: existingScore
        };
      }

      // ‚úÖ CORRECTION: Cr√©ation plus robuste avec retry
      console.log('üÜï Cr√©ation nouveau score du jour...');
      
      try {
        const { data: newScore, error: createError } = await supabase
          .from('daily_scores')
          .insert([{
            user_id: userId,
            date: today,
            score: 0,
            mits_completed: 0,
            total_mits: 0,
            mets_avoided: 0,
            total_mets: 0,
            tasks_completed: 0,
            total_tasks: 0,
            objectives_updated: 0
          }])
          .select()
          .single();

        if (createError) {
          // Si l'erreur est "d√©j√† existe", essayer de r√©cup√©rer √† nouveau
          if (createError.code === '23505') { // Duplicate key
            console.log('üîÑ Score d√©j√† cr√©√© par un autre processus, r√©cup√©ration...');
            
            const { data: retryData, error: retryError } = await supabase
              .from('daily_scores')
              .select('*')
              .eq('user_id', userId)
              .eq('date', today)
              .single();

            if (!retryError && retryData) {
              console.log('‚úÖ Score r√©cup√©r√© apr√®s retry:', retryData);
              return {
                success: true,
                score: retryData
              };
            }
          }
          
          throw createError;
        }

        console.log('‚úÖ Nouveau score cr√©√©:', newScore);
        return {
          success: true,
          score: newScore
        };

      } catch (createErr) {
        console.error('‚ùå Erreur cr√©ation score:', createErr);
        
        // ‚úÖ FALLBACK: Si √©chec de cr√©ation, essayer une derni√®re r√©cup√©ration
        console.log('üîÑ Tentative de r√©cup√©ration fallback...');
        
        try {
          const { data: fallbackData, error: fallbackError } = await supabase
            .from('daily_scores')
            .select('*')
            .eq('user_id', userId)
            .eq('date', today)
            .single();

          if (!fallbackError && fallbackData) {
            console.log('‚úÖ Score r√©cup√©r√© en fallback:', fallbackData);
            return {
              success: true,
              score: fallbackData
            };
          }
        } catch (fallbackErr) {
          console.error('‚ùå Fallback failed:', fallbackErr);
        }
        
        throw createErr;
      }

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration score du jour:', error);
      return {
        success: false,
        error: error.message,
        score: null
      };
    }
  }

  // ‚úÖ CORRIG√â: Mettre √† jour le score du jour avec retry
  static async updateTodayScore(userId, updates) {
    try {
      const today = new Date().toISOString().split('T')[0];
      
      console.log('üîÑ Mise √† jour score du jour...', { userId, updates });

      // ‚úÖ AM√âLIORATION: Essayer la mise √† jour directement d'abord
      let updateResult;
      
      try {
        updateResult = await supabase
          .from('daily_scores')
          .update({
            ...updates,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', userId)
          .eq('date', today)
          .select()
          .single();

        if (!updateResult.error) {
          console.log('‚úÖ Score mis √† jour directement:', updateResult.data);
          return {
            success: true,
            score: updateResult.data
          };
        }
      } catch (directUpdateErr) {
        console.log('‚ö†Ô∏è Mise √† jour directe √©chou√©e, initialisation...');
      }

      // Si la mise √† jour directe √©choue, s'assurer que le score existe d'abord
      const { success: initSuccess, score: currentScore } = await this.getTodayScore(userId);
      if (!initSuccess || !currentScore) {
        throw new Error('Impossible d\'initialiser le score du jour');
      }

      // R√©essayer la mise √† jour
      const { data, error } = await supabase
        .from('daily_scores')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId)
        .eq('date', today)
        .select()
        .single();

      if (error) {
        throw error;
      }

      console.log('‚úÖ Score mis √† jour apr√®s init:', data);
      return {
        success: true,
        score: data
      };

    } catch (error) {
      console.error('‚ùå Erreur mise √† jour score:', error);
      return {
        success: false,
        error: error.message,
        score: null
      };
    }
  }

  // ‚úÖ CORRIG√â: Ajouter des points au score avec meilleure gestion d'erreur
  static async addPoints(userId, points, source = 'manual') {
    try {
      console.log('‚ûï Ajout de points...', { userId, points, source });

      if (!userId) {
        throw new Error('userId requis pour ajouter des points');
      }

      if (typeof points !== 'number' || isNaN(points)) {
        throw new Error('Points doit √™tre un nombre valide');
      }

      const { success, score: currentScore, error: scoreError } = await this.getTodayScore(userId);
      if (!success) {
        console.error('‚ùå Impossible de r√©cup√©rer le score:', scoreError);
        throw new Error(`Impossible de r√©cup√©rer le score actuel: ${scoreError}`);
      }

      if (!currentScore) {
        throw new Error('Score actuel non trouv√©');
      }

      const newScore = (currentScore.score || 0) + points;

      console.log(`üìä Points: ${currentScore.score || 0} + ${points} = ${newScore}`);

      const result = await this.updateTodayScore(userId, {
        score: Math.max(0, newScore) // S'assurer que le score ne devient pas n√©gatif
      });

      if (result.success) {
        console.log(`‚úÖ +${points} points ajout√©s (${source}). Score: ${currentScore.score || 0} ‚Üí ${newScore}`);
      } else {
        throw new Error(`Erreur mise √† jour score: ${result.error}`);
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erreur ajout points:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // ‚úÖ CORRIG√â: Marquer une t√¢che comme termin√©e dans les stats quotidiennes
  static async completeTask(userId, taskCategory = 'general') {
    try {
      console.log('‚úÖ Marquage t√¢che termin√©e...', { userId, taskCategory });

      const { success, score: currentScore } = await this.getTodayScore(userId);
      if (!success || !currentScore) {
        throw new Error('Impossible de r√©cup√©rer le score actuel');
      }

      // Ajouter des points selon la cat√©gorie
      const pointsMap = {
        work: 25,
        health: 30,
        personal: 20,
        learning: 35,
        general: 20
      };

      const points = pointsMap[taskCategory] || 20;
      const newScore = (currentScore.score || 0) + points;
      const newTasksCompleted = (currentScore.tasks_completed || 0) + 1;
      const newTotalTasks = Math.max(currentScore.total_tasks || 0, newTasksCompleted);

      const result = await this.updateTodayScore(userId, {
        score: newScore,
        tasks_completed: newTasksCompleted,
        total_tasks: newTotalTasks
      });

      if (result.success) {
        console.log(`üéØ T√¢che ${taskCategory} termin√©e! +${points} points`);
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erreur completion t√¢che:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // ‚úÖ R√©cup√©rer ou cr√©er l'achievement du jour
  static async getTodayAchievement(userId) {
    try {
      const today = new Date().toISOString().split('T')[0];
      
      console.log('üèÜ R√©cup√©ration achievement du jour...', { userId, today });
      
      const { data, error } = await supabase
        .from('daily_achievements')
        .select('*')
        .eq('user_id', userId)
        .eq('date', today)
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      return {
        success: true,
        achievement: data || null
      };

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration achievement:', error);
      return {
        success: false,
        error: error.message,
        achievement: null
      };
    }
  }

  // ‚úÖ Sauvegarder l'achievement du jour
  static async saveTodayAchievement(userId, achievementText) {
    try {
      const today = new Date().toISOString().split('T')[0];
      
      console.log('üíæ Sauvegarde achievement du jour...', { userId, achievementText });

      // V√©rifier si un achievement existe d√©j√†
      const { achievement: existing } = await this.getTodayAchievement(userId);

      let data, error;

      if (existing) {
        // Mettre √† jour l'achievement existant
        ({ data, error } = await supabase
          .from('daily_achievements')
          .update({
            achievement_text: achievementText,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', userId)
          .eq('date', today)
          .select()
          .single());
      } else {
        // Cr√©er un nouvel achievement
        ({ data, error } = await supabase
          .from('daily_achievements')
          .insert([{
            user_id: userId,
            date: today,
            achievement_text: achievementText
          }])
          .select()
          .single());
      }

      if (error) {
        throw error;
      }

      console.log('‚úÖ Achievement sauvegard√©:', data);
      return {
        success: true,
        achievement: data
      };

    } catch (error) {
      console.error('‚ùå Erreur sauvegarde achievement:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // ‚úÖ R√©cup√©rer les stats de la semaine
  static async getWeeklyStats(userId) {
    try {
      console.log('üìÖ R√©cup√©ration stats hebdomadaires...', { userId });

      // Calculer les dates de d√©but et fin de semaine
      const today = new Date();
      const startOfWeek = new Date(today);
      startOfWeek.setDate(today.getDate() - today.getDay()); // Dimanche
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6); // Samedi

      const startDate = startOfWeek.toISOString().split('T')[0];
      const endDate = endOfWeek.toISOString().split('T')[0];

      const { data, error } = await supabase
        .from('daily_scores')
        .select('*')
        .eq('user_id', userId)
        .gte('date', startDate)
        .lte('date', endDate)
        .order('date', { ascending: true });

      if (error) {
        throw error;
      }

      // Calculer les totaux
      const weeklyStats = {
        totalScore: 0,
        totalTasks: 0,
        averageScore: 0,
        daysActive: 0,
        scores: data || []
      };

      if (data && data.length > 0) {
        weeklyStats.totalScore = data.reduce((sum, day) => sum + (day.score || 0), 0);
        weeklyStats.totalTasks = data.reduce((sum, day) => sum + (day.tasks_completed || 0), 0);
        weeklyStats.daysActive = data.filter(day => (day.score || 0) > 0).length;
        weeklyStats.averageScore = weeklyStats.totalScore / data.length;
      }

      console.log('‚úÖ Stats hebdomadaires r√©cup√©r√©es:', weeklyStats);
      return {
        success: true,
        stats: weeklyStats
      };

    } catch (error) {
      console.error('‚ùå Erreur stats hebdomadaires:', error);
      return {
        success: false,
        error: error.message,
        stats: null
      };
    }
  }

  // ‚úÖ R√©cup√©rer l'historique des scores (pour graphiques)
  static async getScoreHistory(userId, days = 30) {
    try {
      console.log('üìà R√©cup√©ration historique scores...', { userId, days });

      const endDate = new Date().toISOString().split('T')[0];
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);
      const startDateStr = startDate.toISOString().split('T')[0];

      const { data, error } = await supabase
        .from('daily_scores')
        .select('date, score, tasks_completed, mits_completed, mets_avoided')
        .eq('user_id', userId)
        .gte('date', startDateStr)
        .lte('date', endDateStr)
        .order('date', { ascending: true });

      if (error) {
        throw error;
      }

      console.log(`‚úÖ Historique ${data?.length || 0} jours r√©cup√©r√©`);
      return {
        success: true,
        history: data || []
      };

    } catch (error) {
      console.error('‚ùå Erreur historique scores:', error);
      return {
        success: false,
        error: error.message,
        history: []
      };
    }
  }

  // ‚úÖ NOUVEAU: Fonction de debug pour v√©rifier l'√©tat des donn√©es
  static async debugUserData(userId) {
    try {
      console.log('üîç Debug donn√©es utilisateur...', { userId });

      const today = new Date().toISOString().split('T')[0];

      // V√©rifier l'utilisateur
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();

      // V√©rifier le score du jour
      const { data: score, error: scoreError } = await supabase
        .from('daily_scores')
        .select('*')
        .eq('user_id', userId)
        .eq('date', today)
        .single();

      console.log('üîç Debug r√©sultats:', {
        user: user ? 'trouv√©' : 'non trouv√©',
        userError: userError?.message,
        score: score ? 'trouv√©' : 'non trouv√©',
        scoreError: scoreError?.message,
        today
      });

      return {
        user,
        score,
        today,
        userError,
        scoreError
      };

    } catch (error) {
      console.error('‚ùå Erreur debug:', error);
      return { error: error.message };
    }
  }
}